// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package graph

import (
	"fmt"
	"io"
	"strconv"
)

type Category struct {
	ID          string  `json:"id"`
	Name        string  `json:"name"`
	Description *string `json:"description,omitempty"`
	CreatedAt   string  `json:"createdAt"`
}

type ETLJob struct {
	ID            string               `json:"id"`
	Type          ETLJobType           `json:"type"`
	Provider      *string              `json:"provider,omitempty"`
	Status        ETLJobStatus         `json:"status"`
	Progress      *ETLJobProgress      `json:"progress,omitempty"`
	StartedAt     string               `json:"startedAt"`
	CompletedAt   *string              `json:"completedAt,omitempty"`
	Error         *string              `json:"error,omitempty"`
	Configuration *ETLJobConfiguration `json:"configuration"`
}

type ETLJobConfiguration struct {
	Providers         []string `json:"providers,omitempty"`
	Regions           []string `json:"regions,omitempty"`
	Services          []string `json:"services,omitempty"`
	BatchSize         int      `json:"batchSize"`
	ConcurrentWorkers int      `json:"concurrentWorkers"`
	ClearExisting     bool     `json:"clearExisting"`
	DryRun            bool     `json:"dryRun"`
}

type ETLJobProgress struct {
	TotalRecords      int     `json:"totalRecords"`
	ProcessedRecords  int     `json:"processedRecords"`
	NormalizedRecords int     `json:"normalizedRecords"`
	SkippedRecords    int     `json:"skippedRecords"`
	ErrorRecords      int     `json:"errorRecords"`
	CurrentStage      string  `json:"currentStage"`
	LastUpdated       string  `json:"lastUpdated"`
	Rate              float64 `json:"rate"`
}

type Message struct {
	ID        string `json:"id"`
	Content   string `json:"content"`
	CreatedAt string `json:"createdAt"`
}

type Mutation struct {
}

type NormalizationConfigInput struct {
	Type              ETLJobType `json:"type"`
	Providers         []string   `json:"providers,omitempty"`
	Regions           []string   `json:"regions,omitempty"`
	Services          []string   `json:"services,omitempty"`
	BatchSize         *int       `json:"batchSize,omitempty"`
	ConcurrentWorkers *int       `json:"concurrentWorkers,omitempty"`
	ClearExisting     *bool      `json:"clearExisting,omitempty"`
	DryRun            *bool      `json:"dryRun,omitempty"`
}

type Provider struct {
	ID        string `json:"id"`
	Name      string `json:"name"`
	CreatedAt string `json:"createdAt"`
}

type Query struct {
}

type ETLJobStatus string

const (
	ETLJobStatusPending   ETLJobStatus = "PENDING"
	ETLJobStatusRunning   ETLJobStatus = "RUNNING"
	ETLJobStatusCompleted ETLJobStatus = "COMPLETED"
	ETLJobStatusFailed    ETLJobStatus = "FAILED"
	ETLJobStatusCancelled ETLJobStatus = "CANCELLED"
)

var AllETLJobStatus = []ETLJobStatus{
	ETLJobStatusPending,
	ETLJobStatusRunning,
	ETLJobStatusCompleted,
	ETLJobStatusFailed,
	ETLJobStatusCancelled,
}

func (e ETLJobStatus) IsValid() bool {
	switch e {
	case ETLJobStatusPending, ETLJobStatusRunning, ETLJobStatusCompleted, ETLJobStatusFailed, ETLJobStatusCancelled:
		return true
	}
	return false
}

func (e ETLJobStatus) String() string {
	return string(e)
}

func (e *ETLJobStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ETLJobStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ETLJobStatus", str)
	}
	return nil
}

func (e ETLJobStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ETLJobType string

const (
	ETLJobTypeNormalizeAll      ETLJobType = "NORMALIZE_ALL"
	ETLJobTypeNormalizeProvider ETLJobType = "NORMALIZE_PROVIDER"
	ETLJobTypeNormalizeRegion   ETLJobType = "NORMALIZE_REGION"
	ETLJobTypeNormalizeService  ETLJobType = "NORMALIZE_SERVICE"
	ETLJobTypeCleanupNormalized ETLJobType = "CLEANUP_NORMALIZED"
)

var AllETLJobType = []ETLJobType{
	ETLJobTypeNormalizeAll,
	ETLJobTypeNormalizeProvider,
	ETLJobTypeNormalizeRegion,
	ETLJobTypeNormalizeService,
	ETLJobTypeCleanupNormalized,
}

func (e ETLJobType) IsValid() bool {
	switch e {
	case ETLJobTypeNormalizeAll, ETLJobTypeNormalizeProvider, ETLJobTypeNormalizeRegion, ETLJobTypeNormalizeService, ETLJobTypeCleanupNormalized:
		return true
	}
	return false
}

func (e ETLJobType) String() string {
	return string(e)
}

func (e *ETLJobType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ETLJobType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ETLJobType", str)
	}
	return nil
}

func (e ETLJobType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
