package graph

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
)

// Config is the configuration for the executable schema
type Config struct {
	Resolvers  ResolverRoot
	Directives DirectiveRoot
}

// ResolverRoot is the root resolver interface
type ResolverRoot interface {
	Query() QueryResolver
	Mutation() MutationResolver
}

// QueryResolver is the query resolver interface
type QueryResolver interface {
	Hello(ctx context.Context) (string, error)
	Messages(ctx context.Context) ([]*Message, error)
	Providers(ctx context.Context) ([]*Provider, error)
	Categories(ctx context.Context) ([]*Category, error)
}

// MutationResolver is the mutation resolver interface
type MutationResolver interface {
	CreateMessage(ctx context.Context, content string) (*Message, error)
}

// DirectiveRoot is the directive root interface
type DirectiveRoot struct{}

// NewExecutableSchema creates a new executable schema
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	// This is a simplified version. In a real app, gqlgen would generate this
	// For now, we'll need to implement a basic version
	return &executableSchema{
		resolvers: cfg.Resolvers,
	}
}

// executableSchema implements graphql.ExecutableSchema
type executableSchema struct {
	resolvers ResolverRoot
}

// Schema returns the GraphQL schema
func (e *executableSchema) Schema() string {
	return `
type Query {
  hello: String!
  messages: [Message!]!
  providers: [Provider!]!
  categories: [Category!]!
}

type Mutation {
  createMessage(content: String!): Message!
}

type Message {
  id: ID!
  content: String!
  createdAt: String!
}

type Provider {
  id: ID!
  name: String!
  createdAt: String!
}

type Category {
  id: ID!
  name: String!
  description: String
  createdAt: String!
}
`
}

// Complexity is not implemented in this simplified version
func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]interface{}) (int, bool) {
	return 0, false
}

// Exec executes the query (simplified implementation)
func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	// This would normally be generated by gqlgen
	// For now, returning nil as this is just for structure
	return nil
}